---
import type { Experience } from '../../shared/payload-types'
import type { PaginatedResponse } from '../../shared/types'
import api from '../../shared/api'

// Fetch experience data from Payload CMS
const res = await api.get('api/experience?sort=-startDate')
const data = (await res.json()) as PaginatedResponse<Experience>
const experiences = data.docs

// Helper function to format date
const formatDate = (dateString: string) => {
  return new Date(dateString).toLocaleDateString('en-US', {
    month: 'short',
    year: 'numeric'
  })
}

// Helper function to calculate duration
const calculateDuration = (startDate: string, endDate?: string | null, isCurrent?: boolean | null) => {
  const start = new Date(startDate)
  const end = endDate ? new Date(endDate) : new Date()

  const months = (end.getFullYear() - start.getFullYear()) * 12 + (end.getMonth() - start.getMonth())
  const years = Math.floor(months / 12)
  const remainingMonths = months % 12

  if (years === 0) {
    return `${remainingMonths} month${remainingMonths !== 1 ? 's' : ''}`
  } else if (remainingMonths === 0) {
    return `${years} year${years !== 1 ? 's' : ''}`
  } else {
    return `${years} year${years !== 1 ? 's' : ''} ${remainingMonths} month${remainingMonths !== 1 ? 's' : ''}`
  }
}

// Helper function to get job type badge styles
const getJobTypeBadge = (type?: string | null) => {
  if (!type) return null

  const styles = {
    'full-time': 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300',
    'part-time': 'bg-orange-100 text-orange-800 dark:bg-orange-900/30 dark:text-orange-300',
    'contract': 'bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-300'
  }

  return {
    label: type.charAt(0).toUpperCase() + type.slice(1).replace('-', '-'),
    className: styles[type as keyof typeof styles] || 'bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-300'
  }
}
---

<section id="experience" class="py-20 bg-gradient-to-br from-purple-50 via-indigo-50 to-blue-50 dark:from-slate-900 dark:via-slate-800 dark:to-slate-900">
  <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
    <!-- Header -->
    <div class="text-center max-w-3xl mx-auto mb-16">
      <h2 class="text-sm font-semibold text-purple-600 dark:text-purple-400 uppercase tracking-wider mb-4">
        Career Journey
      </h2>
      <h3 class="text-3xl sm:text-4xl font-bold text-gray-900 dark:text-white mb-6">
        Professional Experience
      </h3>
      <p class="text-xl text-gray-600 dark:text-gray-300">
        My journey through different roles and companies, building expertise in full-stack development and AI engineering.
      </p>
    </div>

    <!-- Experience Timeline -->
    <div class="max-w-4xl mx-auto">
      <div class="relative">
        <!-- Timeline line -->
        <div class="absolute left-8 top-0 bottom-0 w-0.5 bg-gradient-to-b from-purple-400 to-blue-400 dark:from-purple-500 dark:to-blue-500"></div>

        <!-- Experience items -->
        <div class="space-y-12">
          {experiences.map((experience, index) => (
            <div class="relative flex items-start group">
              <!-- Timeline dot -->
              <div class="absolute left-6 w-4 h-4 bg-white dark:bg-slate-800 border-4 border-purple-400 dark:border-purple-500 rounded-full group-hover:border-purple-600 dark:group-hover:border-purple-400 transition-colors duration-300 z-10"></div>

              <!-- Content card -->
              <div class="ml-16 w-full">
                <div class="bg-white/70 dark:bg-slate-800/70 backdrop-blur-sm rounded-xl p-6 shadow-lg hover:shadow-xl transition-all duration-300 border border-gray-200/50 dark:border-slate-700/50 group-hover:border-purple-300 dark:group-hover:border-purple-600">
                  <!-- Header -->
                  <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4">
                    <div class="flex-1">
                      <div class="flex items-center gap-3 mb-1">
                        <h4 class="text-xl font-bold text-gray-900 dark:text-white">
                          {experience.position}
                        </h4>
                        {experience.isCurrent && (
                          <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400">
                            Current
                          </span>
                        )}
                        {getJobTypeBadge(experience.type) && (
                          <span class={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getJobTypeBadge(experience.type)?.className}`}>
                            {getJobTypeBadge(experience.type)?.label}
                          </span>
                        )}
                      </div>
                      <div class="flex items-center space-x-2 mb-2">
                        {experience.websiteUrl ? (
                          <a
                            href={experience.websiteUrl}
                            target="_blank"
                            rel="noopener noreferrer"
                            class="text-lg font-semibold text-purple-600 dark:text-purple-400 hover:text-purple-700 dark:hover:text-purple-300 transition-colors"
                          >
                            {experience.company}
                          </a>
                        ) : (
                          <span class="text-lg font-semibold text-purple-600 dark:text-purple-400">
                            {experience.company}
                          </span>
                        )}
                        <span class="text-gray-400 dark:text-gray-500">•</span>
                        <span class="text-gray-600 dark:text-gray-400">
                          {experience.location}
                        </span>
                      </div>
                    </div>

                    <!-- Date and duration -->
                    <div class="text-right mt-2 sm:mt-0">
                      <!-- Mobile: single line layout -->
                      <div class="block sm:hidden">
                        <div class="text-sm text-gray-600 dark:text-gray-300 flex items-center justify-end gap-2 flex-wrap">
                          <span class="font-medium">
                            {formatDate(experience.startDate)} - {experience.isCurrent ? 'Present' : experience.endDate ? formatDate(experience.endDate) : 'Present'}
                          </span>
                          <span class="text-gray-400">•</span>
                          <span class="text-xs">
                            {calculateDuration(experience.startDate, experience.endDate, experience.isCurrent)}
                          </span>
                        </div>
                      </div>

                      <!-- Desktop: multi-line layout -->
                      <div class="hidden sm:block">
                        <div class="text-sm font-medium text-gray-700 dark:text-gray-300">
                          {formatDate(experience.startDate)} - {experience.isCurrent ? 'Present' : experience.endDate ? formatDate(experience.endDate) : 'Present'}
                        </div>
                        <div class="text-xs text-gray-500 dark:text-gray-400">
                          {calculateDuration(experience.startDate, experience.endDate, experience.isCurrent)}
                        </div>
                      </div>
                    </div>
                  </div>

                  <!-- Description -->
                  <p class="text-gray-600 dark:text-gray-300 mb-4 leading-relaxed">
                    {experience.description}
                  </p>

                  <!-- Achievements -->
                  {experience.achievements && experience.achievements.length > 0 && (
                    <div class="mb-4">
                      <h5 class="text-sm font-semibold text-gray-900 dark:text-white mb-2">Key Achievements:</h5>
                      <ul class="space-y-1 list-disc list-inside">
                        {experience.achievements.map((achievement) => (
                          <li class="text-sm text-gray-600 dark:text-gray-300">
                            {achievement.achievement}
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}

                  <!-- Technologies -->
                  {experience.technologies && experience.technologies.length > 0 && (
                    <div>
                      <h5 class="text-sm font-semibold text-gray-900 dark:text-white mb-2">Technologies Used:</h5>
                      <div class="flex flex-wrap gap-2">
                        {experience.technologies.map((tech) => (
                          <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-300 border border-purple-200 dark:border-purple-700">
                            {typeof tech.technology === 'object' && tech.technology ? tech.technology.name : 'Technology'}
                          </span>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>

    <!-- Call to action -->
    <div class="text-center mt-16">
      <div class="bg-white/50 dark:bg-slate-800/50 backdrop-blur-sm rounded-2xl p-8 max-w-2xl mx-auto border border-gray-200/50 dark:border-slate-700/50">
        <h4 class="text-2xl font-bold text-gray-900 dark:text-white mb-4">
          Ready to Work Together?
        </h4>
        <p class="text-gray-600 dark:text-gray-300 mb-6">
          Let's discuss how my experience can help bring your next project to life.
        </p>
        <a
          href="#contact"
          class="inline-flex items-center px-6 py-3 bg-gradient-to-r from-purple-600 to-blue-600 text-white font-semibold rounded-lg hover:from-purple-700 hover:to-blue-700 transition-all duration-200 shadow-lg hover:shadow-xl"
        >
          Get In Touch
          <svg class="ml-2 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
          </svg>
        </a>
      </div>
    </div>
  </div>
</section>
